package cf.witcheskitchen.api.fluid;


import net.minecraft.fluid.Fluid;
import net.minecraft.fluid.Fluids;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.Registry;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.annotation.Nonnull;

/**
 * Represents a fluid stack that can be
 * saved and loaded from a fluid tank.
 */
public class FluidStack {

    private static final Logger LOGGER = LogManager.getLogger();
    public static final FluidStack EMPTY = new FluidStack(Fluids.EMPTY, 0);
    public static final String FLUID_KEY = "Fluid";
    public static final String AMOUNT_KEY = "Amount";
    private static final String STACK_DATA_KEY = "Data";
    private Fluid fluid;
    private int amount;
    private boolean empty;
    private NbtCompound data;
    /**
     * Color used by universal bucket and the ModelFluid baked model.
     * Note that this int includes the alpha so converting this to RGB with alpha would be
     *   float r = ((color >> 16) & 0xFF) / 255f; // red
     *   float g = ((color >> 8) & 0xFF) / 255f; // green
     *   float b = ((color >> 0) & 0xFF) / 255f; // blue
     *   float a = ((color >> 24) & 0xFF) / 255f; // alpha
     */
    private int color;

    public FluidStack(Fluid fluid, int amount, NbtCompound data) {
        this(fluid, amount);
        if (data != null && !data.isEmpty()) {
            this.data = data.copy();
        }
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public FluidStack(FluidStack stack, int amount) {
        this(stack.getFluid(), amount, stack.getNbtData());
    }

    // Default constructor
    public FluidStack(Fluid fluid, int amount) {
        if (fluid == null) {
            LOGGER.fatal("Null fluid supplied to FluidStack.");
            throw new IllegalArgumentException("Attempt to create FluidStack with null fluid.");
        }
        this.fluid = fluid;
        this.amount = amount;
        this.updateEmptyState();
    }

    public NbtCompound writeNbt(NbtCompound nbt) {
        final NbtCompound data = new NbtCompound();
        data.putString(FLUID_KEY, Registry.FLUID.getId(fluid).toString());
        data.putInt(AMOUNT_KEY, this.amount);
        if (this.data != null && !this.data.isEmpty()) {
            nbt.put(STACK_DATA_KEY, this.data);
        }
        return data;
    }

    public void readNbt(NbtCompound nbt) {
        this.fluid = Registry.FLUID.get(new Identifier(nbt.getString(FLUID_KEY)));
        this.amount = nbt.getInt(AMOUNT_KEY);
        if (nbt.contains(STACK_DATA_KEY)) {
            nbt.put(STACK_DATA_KEY, this.data);
        }
    }
    /**
     * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid, the stack
     * will return as null.
     */
    public static FluidStack fromNbt(NbtCompound nbt) {
        if (nbt == null) {
            return EMPTY;
        }
        final Identifier id = new Identifier(nbt.getString(FLUID_KEY));
        final Fluid fluid = Registry.FLUID.get(id);
        final FluidStack stack = new FluidStack(fluid, nbt.getInt("Amount"));
        if (nbt.contains(STACK_DATA_KEY)) {
            stack.data = nbt.getCompound(STACK_DATA_KEY);
        }
        return stack;
    }

    public boolean isEqualTo(@Nonnull FluidStack other) {
        return this.isFluidNbtEqualTo(other) && this.getFluid().equals(other.getFluid());

    }
    private boolean isFluidNbtEqualTo(FluidStack other) {
        return this.data == null ? other.data == null : other.data != null && data.equals(other.data);
    }

    public NbtCompound getNbtData() {
        return data;
    }

    public Fluid getFluid() {
        return fluid;
    }

    public int getAmount() {
        return amount;
    }

    public boolean isEmpty() {
        return empty;
    }

    private void updateEmptyState() {
        if (this.amount <= 0) {
            this.empty = true;
        } else {
            this.empty = this.getFluid().equals(Fluids.EMPTY);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof FluidStack other) {
            return this.isEqualTo(other);
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        // Generated by Intellij
        int result = fluid != null ? fluid.hashCode() : 0;
        result = 31 * result + amount;
        result = 31 * result + (empty ? 1 : 0);
        result = 31 * result + (data != null ? data.hashCode() : 0);
        return result;
    }
}
